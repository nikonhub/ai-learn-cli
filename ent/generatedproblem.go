// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nikonhub/ai-learn-cli/ent/generatedproblem"
	"github.com/nikonhub/ai-learn-cli/ent/item"
)

// GeneratedProblem is the model entity for the GeneratedProblem schema.
type GeneratedProblem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProblemText holds the value of the "problem_text" field.
	ProblemText string `json:"problem_text,omitempty"`
	// GeneratedOn holds the value of the "generated_on" field.
	GeneratedOn time.Time `json:"generated_on,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GeneratedProblemQuery when eager-loading is set.
	Edges                   GeneratedProblemEdges `json:"edges"`
	item_generated_problems *int
	selectValues            sql.SelectValues
}

// GeneratedProblemEdges holds the relations/edges for other nodes in the graph.
type GeneratedProblemEdges struct {
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GeneratedProblemEdges) ItemOrErr() (*Item, error) {
	if e.Item != nil {
		return e.Item, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: item.Label}
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GeneratedProblem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case generatedproblem.FieldID:
			values[i] = new(sql.NullInt64)
		case generatedproblem.FieldProblemText:
			values[i] = new(sql.NullString)
		case generatedproblem.FieldGeneratedOn:
			values[i] = new(sql.NullTime)
		case generatedproblem.ForeignKeys[0]: // item_generated_problems
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GeneratedProblem fields.
func (gp *GeneratedProblem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case generatedproblem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gp.ID = int(value.Int64)
		case generatedproblem.FieldProblemText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field problem_text", values[i])
			} else if value.Valid {
				gp.ProblemText = value.String
			}
		case generatedproblem.FieldGeneratedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field generated_on", values[i])
			} else if value.Valid {
				gp.GeneratedOn = value.Time
			}
		case generatedproblem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field item_generated_problems", value)
			} else if value.Valid {
				gp.item_generated_problems = new(int)
				*gp.item_generated_problems = int(value.Int64)
			}
		default:
			gp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GeneratedProblem.
// This includes values selected through modifiers, order, etc.
func (gp *GeneratedProblem) Value(name string) (ent.Value, error) {
	return gp.selectValues.Get(name)
}

// QueryItem queries the "item" edge of the GeneratedProblem entity.
func (gp *GeneratedProblem) QueryItem() *ItemQuery {
	return NewGeneratedProblemClient(gp.config).QueryItem(gp)
}

// Update returns a builder for updating this GeneratedProblem.
// Note that you need to call GeneratedProblem.Unwrap() before calling this method if this GeneratedProblem
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GeneratedProblem) Update() *GeneratedProblemUpdateOne {
	return NewGeneratedProblemClient(gp.config).UpdateOne(gp)
}

// Unwrap unwraps the GeneratedProblem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GeneratedProblem) Unwrap() *GeneratedProblem {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("ent: GeneratedProblem is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GeneratedProblem) String() string {
	var builder strings.Builder
	builder.WriteString("GeneratedProblem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("problem_text=")
	builder.WriteString(gp.ProblemText)
	builder.WriteString(", ")
	builder.WriteString("generated_on=")
	builder.WriteString(gp.GeneratedOn.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GeneratedProblems is a parsable slice of GeneratedProblem.
type GeneratedProblems []*GeneratedProblem
