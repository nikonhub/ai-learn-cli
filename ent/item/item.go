// Code generated by ent, DO NOT EDIT.

package item

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// EdgeGeneratedProblems holds the string denoting the generated_problems edge name in mutations.
	EdgeGeneratedProblems = "generated_problems"
	// EdgeProgress holds the string denoting the progress edge name in mutations.
	EdgeProgress = "progress"
	// Table holds the table name of the item in the database.
	Table = "items"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "items"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_items"
	// GeneratedProblemsTable is the table that holds the generated_problems relation/edge.
	GeneratedProblemsTable = "generated_problems"
	// GeneratedProblemsInverseTable is the table name for the GeneratedProblem entity.
	// It exists in this package in order to avoid circular dependency with the "generatedproblem" package.
	GeneratedProblemsInverseTable = "generated_problems"
	// GeneratedProblemsColumn is the table column denoting the generated_problems relation/edge.
	GeneratedProblemsColumn = "item_generated_problems"
	// ProgressTable is the table that holds the progress relation/edge.
	ProgressTable = "item_progresses"
	// ProgressInverseTable is the table name for the ItemProgress entity.
	// It exists in this package in order to avoid circular dependency with the "itemprogress" package.
	ProgressInverseTable = "item_progresses"
	// ProgressColumn is the table column denoting the progress relation/edge.
	ProgressColumn = "item_progress"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"topic_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Item queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTopicField orders the results by topic field.
func ByTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicStep(), sql.OrderByField(field, opts...))
	}
}

// ByGeneratedProblemsCount orders the results by generated_problems count.
func ByGeneratedProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGeneratedProblemsStep(), opts...)
	}
}

// ByGeneratedProblems orders the results by generated_problems terms.
func ByGeneratedProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGeneratedProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgressCount orders the results by progress count.
func ByProgressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressStep(), opts...)
	}
}

// ByProgress orders the results by progress terms.
func ByProgress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TopicTable, TopicColumn),
	)
}
func newGeneratedProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GeneratedProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GeneratedProblemsTable, GeneratedProblemsColumn),
	)
}
func newProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressTable, ProgressColumn),
	)
}
