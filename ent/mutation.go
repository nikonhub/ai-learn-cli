// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nikonhub/ai-learn-cli/ent/generatedproblem"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/itemprogress"
	"github.com/nikonhub/ai-learn-cli/ent/predicate"
	"github.com/nikonhub/ai-learn-cli/ent/settings"
	"github.com/nikonhub/ai-learn-cli/ent/topic"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGeneratedProblem = "GeneratedProblem"
	TypeItem             = "Item"
	TypeItemProgress     = "ItemProgress"
	TypeSettings         = "Settings"
	TypeTopic            = "Topic"
)

// GeneratedProblemMutation represents an operation that mutates the GeneratedProblem nodes in the graph.
type GeneratedProblemMutation struct {
	config
	op            Op
	typ           string
	id            *int
	problem_text  *string
	generated_on  *time.Time
	clearedFields map[string]struct{}
	item          *int
	cleareditem   bool
	done          bool
	oldValue      func(context.Context) (*GeneratedProblem, error)
	predicates    []predicate.GeneratedProblem
}

var _ ent.Mutation = (*GeneratedProblemMutation)(nil)

// generatedproblemOption allows management of the mutation configuration using functional options.
type generatedproblemOption func(*GeneratedProblemMutation)

// newGeneratedProblemMutation creates new mutation for the GeneratedProblem entity.
func newGeneratedProblemMutation(c config, op Op, opts ...generatedproblemOption) *GeneratedProblemMutation {
	m := &GeneratedProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeGeneratedProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGeneratedProblemID sets the ID field of the mutation.
func withGeneratedProblemID(id int) generatedproblemOption {
	return func(m *GeneratedProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *GeneratedProblem
		)
		m.oldValue = func(ctx context.Context) (*GeneratedProblem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GeneratedProblem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGeneratedProblem sets the old GeneratedProblem of the mutation.
func withGeneratedProblem(node *GeneratedProblem) generatedproblemOption {
	return func(m *GeneratedProblemMutation) {
		m.oldValue = func(context.Context) (*GeneratedProblem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GeneratedProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GeneratedProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GeneratedProblemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GeneratedProblemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GeneratedProblem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProblemText sets the "problem_text" field.
func (m *GeneratedProblemMutation) SetProblemText(s string) {
	m.problem_text = &s
}

// ProblemText returns the value of the "problem_text" field in the mutation.
func (m *GeneratedProblemMutation) ProblemText() (r string, exists bool) {
	v := m.problem_text
	if v == nil {
		return
	}
	return *v, true
}

// OldProblemText returns the old "problem_text" field's value of the GeneratedProblem entity.
// If the GeneratedProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedProblemMutation) OldProblemText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProblemText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProblemText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProblemText: %w", err)
	}
	return oldValue.ProblemText, nil
}

// ResetProblemText resets all changes to the "problem_text" field.
func (m *GeneratedProblemMutation) ResetProblemText() {
	m.problem_text = nil
}

// SetGeneratedOn sets the "generated_on" field.
func (m *GeneratedProblemMutation) SetGeneratedOn(t time.Time) {
	m.generated_on = &t
}

// GeneratedOn returns the value of the "generated_on" field in the mutation.
func (m *GeneratedProblemMutation) GeneratedOn() (r time.Time, exists bool) {
	v := m.generated_on
	if v == nil {
		return
	}
	return *v, true
}

// OldGeneratedOn returns the old "generated_on" field's value of the GeneratedProblem entity.
// If the GeneratedProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedProblemMutation) OldGeneratedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGeneratedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGeneratedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGeneratedOn: %w", err)
	}
	return oldValue.GeneratedOn, nil
}

// ResetGeneratedOn resets all changes to the "generated_on" field.
func (m *GeneratedProblemMutation) ResetGeneratedOn() {
	m.generated_on = nil
}

// SetItemID sets the "item" edge to the Item entity by id.
func (m *GeneratedProblemMutation) SetItemID(id int) {
	m.item = &id
}

// ClearItem clears the "item" edge to the Item entity.
func (m *GeneratedProblemMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *GeneratedProblemMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemID returns the "item" edge ID in the mutation.
func (m *GeneratedProblemMutation) ItemID() (id int, exists bool) {
	if m.item != nil {
		return *m.item, true
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *GeneratedProblemMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *GeneratedProblemMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// Where appends a list predicates to the GeneratedProblemMutation builder.
func (m *GeneratedProblemMutation) Where(ps ...predicate.GeneratedProblem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GeneratedProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GeneratedProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GeneratedProblem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GeneratedProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GeneratedProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GeneratedProblem).
func (m *GeneratedProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GeneratedProblemMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.problem_text != nil {
		fields = append(fields, generatedproblem.FieldProblemText)
	}
	if m.generated_on != nil {
		fields = append(fields, generatedproblem.FieldGeneratedOn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GeneratedProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case generatedproblem.FieldProblemText:
		return m.ProblemText()
	case generatedproblem.FieldGeneratedOn:
		return m.GeneratedOn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GeneratedProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case generatedproblem.FieldProblemText:
		return m.OldProblemText(ctx)
	case generatedproblem.FieldGeneratedOn:
		return m.OldGeneratedOn(ctx)
	}
	return nil, fmt.Errorf("unknown GeneratedProblem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneratedProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case generatedproblem.FieldProblemText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProblemText(v)
		return nil
	case generatedproblem.FieldGeneratedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGeneratedOn(v)
		return nil
	}
	return fmt.Errorf("unknown GeneratedProblem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GeneratedProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GeneratedProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneratedProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GeneratedProblem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GeneratedProblemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GeneratedProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GeneratedProblemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GeneratedProblem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GeneratedProblemMutation) ResetField(name string) error {
	switch name {
	case generatedproblem.FieldProblemText:
		m.ResetProblemText()
		return nil
	case generatedproblem.FieldGeneratedOn:
		m.ResetGeneratedOn()
		return nil
	}
	return fmt.Errorf("unknown GeneratedProblem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GeneratedProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.item != nil {
		edges = append(edges, generatedproblem.EdgeItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GeneratedProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case generatedproblem.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GeneratedProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GeneratedProblemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GeneratedProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditem {
		edges = append(edges, generatedproblem.EdgeItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GeneratedProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case generatedproblem.EdgeItem:
		return m.cleareditem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GeneratedProblemMutation) ClearEdge(name string) error {
	switch name {
	case generatedproblem.EdgeItem:
		m.ClearItem()
		return nil
	}
	return fmt.Errorf("unknown GeneratedProblem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GeneratedProblemMutation) ResetEdge(name string) error {
	switch name {
	case generatedproblem.EdgeItem:
		m.ResetItem()
		return nil
	}
	return fmt.Errorf("unknown GeneratedProblem edge %s", name)
}

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	description               *string
	clearedFields             map[string]struct{}
	topic                     *int
	clearedtopic              bool
	generated_problems        map[int]struct{}
	removedgenerated_problems map[int]struct{}
	clearedgenerated_problems bool
	progress                  map[int]struct{}
	removedprogress           map[int]struct{}
	clearedprogress           bool
	done                      bool
	oldValue                  func(context.Context) (*Item, error)
	predicates                []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ItemMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[item.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ItemMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[item.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ItemMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, item.FieldDescription)
}

// SetTopicID sets the "topic" edge to the Topic entity by id.
func (m *ItemMutation) SetTopicID(id int) {
	m.topic = &id
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (m *ItemMutation) ClearTopic() {
	m.clearedtopic = true
}

// TopicCleared reports if the "topic" edge to the Topic entity was cleared.
func (m *ItemMutation) TopicCleared() bool {
	return m.clearedtopic
}

// TopicID returns the "topic" edge ID in the mutation.
func (m *ItemMutation) TopicID() (id int, exists bool) {
	if m.topic != nil {
		return *m.topic, true
	}
	return
}

// TopicIDs returns the "topic" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TopicID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) TopicIDs() (ids []int) {
	if id := m.topic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTopic resets all changes to the "topic" edge.
func (m *ItemMutation) ResetTopic() {
	m.topic = nil
	m.clearedtopic = false
}

// AddGeneratedProblemIDs adds the "generated_problems" edge to the GeneratedProblem entity by ids.
func (m *ItemMutation) AddGeneratedProblemIDs(ids ...int) {
	if m.generated_problems == nil {
		m.generated_problems = make(map[int]struct{})
	}
	for i := range ids {
		m.generated_problems[ids[i]] = struct{}{}
	}
}

// ClearGeneratedProblems clears the "generated_problems" edge to the GeneratedProblem entity.
func (m *ItemMutation) ClearGeneratedProblems() {
	m.clearedgenerated_problems = true
}

// GeneratedProblemsCleared reports if the "generated_problems" edge to the GeneratedProblem entity was cleared.
func (m *ItemMutation) GeneratedProblemsCleared() bool {
	return m.clearedgenerated_problems
}

// RemoveGeneratedProblemIDs removes the "generated_problems" edge to the GeneratedProblem entity by IDs.
func (m *ItemMutation) RemoveGeneratedProblemIDs(ids ...int) {
	if m.removedgenerated_problems == nil {
		m.removedgenerated_problems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.generated_problems, ids[i])
		m.removedgenerated_problems[ids[i]] = struct{}{}
	}
}

// RemovedGeneratedProblems returns the removed IDs of the "generated_problems" edge to the GeneratedProblem entity.
func (m *ItemMutation) RemovedGeneratedProblemsIDs() (ids []int) {
	for id := range m.removedgenerated_problems {
		ids = append(ids, id)
	}
	return
}

// GeneratedProblemsIDs returns the "generated_problems" edge IDs in the mutation.
func (m *ItemMutation) GeneratedProblemsIDs() (ids []int) {
	for id := range m.generated_problems {
		ids = append(ids, id)
	}
	return
}

// ResetGeneratedProblems resets all changes to the "generated_problems" edge.
func (m *ItemMutation) ResetGeneratedProblems() {
	m.generated_problems = nil
	m.clearedgenerated_problems = false
	m.removedgenerated_problems = nil
}

// AddProgresIDs adds the "progress" edge to the ItemProgress entity by ids.
func (m *ItemMutation) AddProgresIDs(ids ...int) {
	if m.progress == nil {
		m.progress = make(map[int]struct{})
	}
	for i := range ids {
		m.progress[ids[i]] = struct{}{}
	}
}

// ClearProgress clears the "progress" edge to the ItemProgress entity.
func (m *ItemMutation) ClearProgress() {
	m.clearedprogress = true
}

// ProgressCleared reports if the "progress" edge to the ItemProgress entity was cleared.
func (m *ItemMutation) ProgressCleared() bool {
	return m.clearedprogress
}

// RemoveProgresIDs removes the "progress" edge to the ItemProgress entity by IDs.
func (m *ItemMutation) RemoveProgresIDs(ids ...int) {
	if m.removedprogress == nil {
		m.removedprogress = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.progress, ids[i])
		m.removedprogress[ids[i]] = struct{}{}
	}
}

// RemovedProgress returns the removed IDs of the "progress" edge to the ItemProgress entity.
func (m *ItemMutation) RemovedProgressIDs() (ids []int) {
	for id := range m.removedprogress {
		ids = append(ids, id)
	}
	return
}

// ProgressIDs returns the "progress" edge IDs in the mutation.
func (m *ItemMutation) ProgressIDs() (ids []int) {
	for id := range m.progress {
		ids = append(ids, id)
	}
	return
}

// ResetProgress resets all changes to the "progress" edge.
func (m *ItemMutation) ResetProgress() {
	m.progress = nil
	m.clearedprogress = false
	m.removedprogress = nil
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Item, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	if m.description != nil {
		fields = append(fields, item.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldName:
		return m.Name()
	case item.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldName:
		return m.OldName(ctx)
	case item.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case item.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldDescription) {
		fields = append(fields, item.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldName:
		m.ResetName()
		return nil
	case item.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.topic != nil {
		edges = append(edges, item.EdgeTopic)
	}
	if m.generated_problems != nil {
		edges = append(edges, item.EdgeGeneratedProblems)
	}
	if m.progress != nil {
		edges = append(edges, item.EdgeProgress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeTopic:
		if id := m.topic; id != nil {
			return []ent.Value{*id}
		}
	case item.EdgeGeneratedProblems:
		ids := make([]ent.Value, 0, len(m.generated_problems))
		for id := range m.generated_problems {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeProgress:
		ids := make([]ent.Value, 0, len(m.progress))
		for id := range m.progress {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgenerated_problems != nil {
		edges = append(edges, item.EdgeGeneratedProblems)
	}
	if m.removedprogress != nil {
		edges = append(edges, item.EdgeProgress)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeGeneratedProblems:
		ids := make([]ent.Value, 0, len(m.removedgenerated_problems))
		for id := range m.removedgenerated_problems {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeProgress:
		ids := make([]ent.Value, 0, len(m.removedprogress))
		for id := range m.removedprogress {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedtopic {
		edges = append(edges, item.EdgeTopic)
	}
	if m.clearedgenerated_problems {
		edges = append(edges, item.EdgeGeneratedProblems)
	}
	if m.clearedprogress {
		edges = append(edges, item.EdgeProgress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeTopic:
		return m.clearedtopic
	case item.EdgeGeneratedProblems:
		return m.clearedgenerated_problems
	case item.EdgeProgress:
		return m.clearedprogress
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeTopic:
		m.ClearTopic()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeTopic:
		m.ResetTopic()
		return nil
	case item.EdgeGeneratedProblems:
		m.ResetGeneratedProblems()
		return nil
	case item.EdgeProgress:
		m.ResetProgress()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// ItemProgressMutation represents an operation that mutates the ItemProgress nodes in the graph.
type ItemProgressMutation struct {
	config
	op               Op
	typ              string
	id               *int
	next_review_date *time.Time
	interval_days    *int
	addinterval_days *int
	ease_factor      *float64
	addease_factor   *float64
	streak           *int
	addstreak        *int
	clearedFields    map[string]struct{}
	item             *int
	cleareditem      bool
	done             bool
	oldValue         func(context.Context) (*ItemProgress, error)
	predicates       []predicate.ItemProgress
}

var _ ent.Mutation = (*ItemProgressMutation)(nil)

// itemprogressOption allows management of the mutation configuration using functional options.
type itemprogressOption func(*ItemProgressMutation)

// newItemProgressMutation creates new mutation for the ItemProgress entity.
func newItemProgressMutation(c config, op Op, opts ...itemprogressOption) *ItemProgressMutation {
	m := &ItemProgressMutation{
		config:        c,
		op:            op,
		typ:           TypeItemProgress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemProgressID sets the ID field of the mutation.
func withItemProgressID(id int) itemprogressOption {
	return func(m *ItemProgressMutation) {
		var (
			err   error
			once  sync.Once
			value *ItemProgress
		)
		m.oldValue = func(ctx context.Context) (*ItemProgress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ItemProgress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItemProgress sets the old ItemProgress of the mutation.
func withItemProgress(node *ItemProgress) itemprogressOption {
	return func(m *ItemProgressMutation) {
		m.oldValue = func(context.Context) (*ItemProgress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemProgressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemProgressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemProgressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemProgressMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ItemProgress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNextReviewDate sets the "next_review_date" field.
func (m *ItemProgressMutation) SetNextReviewDate(t time.Time) {
	m.next_review_date = &t
}

// NextReviewDate returns the value of the "next_review_date" field in the mutation.
func (m *ItemProgressMutation) NextReviewDate() (r time.Time, exists bool) {
	v := m.next_review_date
	if v == nil {
		return
	}
	return *v, true
}

// OldNextReviewDate returns the old "next_review_date" field's value of the ItemProgress entity.
// If the ItemProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemProgressMutation) OldNextReviewDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextReviewDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextReviewDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNextReviewDate: %w", err)
	}
	return oldValue.NextReviewDate, nil
}

// ResetNextReviewDate resets all changes to the "next_review_date" field.
func (m *ItemProgressMutation) ResetNextReviewDate() {
	m.next_review_date = nil
}

// SetIntervalDays sets the "interval_days" field.
func (m *ItemProgressMutation) SetIntervalDays(i int) {
	m.interval_days = &i
	m.addinterval_days = nil
}

// IntervalDays returns the value of the "interval_days" field in the mutation.
func (m *ItemProgressMutation) IntervalDays() (r int, exists bool) {
	v := m.interval_days
	if v == nil {
		return
	}
	return *v, true
}

// OldIntervalDays returns the old "interval_days" field's value of the ItemProgress entity.
// If the ItemProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemProgressMutation) OldIntervalDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIntervalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIntervalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntervalDays: %w", err)
	}
	return oldValue.IntervalDays, nil
}

// AddIntervalDays adds i to the "interval_days" field.
func (m *ItemProgressMutation) AddIntervalDays(i int) {
	if m.addinterval_days != nil {
		*m.addinterval_days += i
	} else {
		m.addinterval_days = &i
	}
}

// AddedIntervalDays returns the value that was added to the "interval_days" field in this mutation.
func (m *ItemProgressMutation) AddedIntervalDays() (r int, exists bool) {
	v := m.addinterval_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetIntervalDays resets all changes to the "interval_days" field.
func (m *ItemProgressMutation) ResetIntervalDays() {
	m.interval_days = nil
	m.addinterval_days = nil
}

// SetEaseFactor sets the "ease_factor" field.
func (m *ItemProgressMutation) SetEaseFactor(f float64) {
	m.ease_factor = &f
	m.addease_factor = nil
}

// EaseFactor returns the value of the "ease_factor" field in the mutation.
func (m *ItemProgressMutation) EaseFactor() (r float64, exists bool) {
	v := m.ease_factor
	if v == nil {
		return
	}
	return *v, true
}

// OldEaseFactor returns the old "ease_factor" field's value of the ItemProgress entity.
// If the ItemProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemProgressMutation) OldEaseFactor(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEaseFactor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEaseFactor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEaseFactor: %w", err)
	}
	return oldValue.EaseFactor, nil
}

// AddEaseFactor adds f to the "ease_factor" field.
func (m *ItemProgressMutation) AddEaseFactor(f float64) {
	if m.addease_factor != nil {
		*m.addease_factor += f
	} else {
		m.addease_factor = &f
	}
}

// AddedEaseFactor returns the value that was added to the "ease_factor" field in this mutation.
func (m *ItemProgressMutation) AddedEaseFactor() (r float64, exists bool) {
	v := m.addease_factor
	if v == nil {
		return
	}
	return *v, true
}

// ResetEaseFactor resets all changes to the "ease_factor" field.
func (m *ItemProgressMutation) ResetEaseFactor() {
	m.ease_factor = nil
	m.addease_factor = nil
}

// SetStreak sets the "streak" field.
func (m *ItemProgressMutation) SetStreak(i int) {
	m.streak = &i
	m.addstreak = nil
}

// Streak returns the value of the "streak" field in the mutation.
func (m *ItemProgressMutation) Streak() (r int, exists bool) {
	v := m.streak
	if v == nil {
		return
	}
	return *v, true
}

// OldStreak returns the old "streak" field's value of the ItemProgress entity.
// If the ItemProgress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemProgressMutation) OldStreak(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreak is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreak requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreak: %w", err)
	}
	return oldValue.Streak, nil
}

// AddStreak adds i to the "streak" field.
func (m *ItemProgressMutation) AddStreak(i int) {
	if m.addstreak != nil {
		*m.addstreak += i
	} else {
		m.addstreak = &i
	}
}

// AddedStreak returns the value that was added to the "streak" field in this mutation.
func (m *ItemProgressMutation) AddedStreak() (r int, exists bool) {
	v := m.addstreak
	if v == nil {
		return
	}
	return *v, true
}

// ResetStreak resets all changes to the "streak" field.
func (m *ItemProgressMutation) ResetStreak() {
	m.streak = nil
	m.addstreak = nil
}

// SetItemID sets the "item" edge to the Item entity by id.
func (m *ItemProgressMutation) SetItemID(id int) {
	m.item = &id
}

// ClearItem clears the "item" edge to the Item entity.
func (m *ItemProgressMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *ItemProgressMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemID returns the "item" edge ID in the mutation.
func (m *ItemProgressMutation) ItemID() (id int, exists bool) {
	if m.item != nil {
		return *m.item, true
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *ItemProgressMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *ItemProgressMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// Where appends a list predicates to the ItemProgressMutation builder.
func (m *ItemProgressMutation) Where(ps ...predicate.ItemProgress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ItemProgressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ItemProgressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ItemProgress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ItemProgressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ItemProgressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ItemProgress).
func (m *ItemProgressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemProgressMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.next_review_date != nil {
		fields = append(fields, itemprogress.FieldNextReviewDate)
	}
	if m.interval_days != nil {
		fields = append(fields, itemprogress.FieldIntervalDays)
	}
	if m.ease_factor != nil {
		fields = append(fields, itemprogress.FieldEaseFactor)
	}
	if m.streak != nil {
		fields = append(fields, itemprogress.FieldStreak)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemProgressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case itemprogress.FieldNextReviewDate:
		return m.NextReviewDate()
	case itemprogress.FieldIntervalDays:
		return m.IntervalDays()
	case itemprogress.FieldEaseFactor:
		return m.EaseFactor()
	case itemprogress.FieldStreak:
		return m.Streak()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemProgressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case itemprogress.FieldNextReviewDate:
		return m.OldNextReviewDate(ctx)
	case itemprogress.FieldIntervalDays:
		return m.OldIntervalDays(ctx)
	case itemprogress.FieldEaseFactor:
		return m.OldEaseFactor(ctx)
	case itemprogress.FieldStreak:
		return m.OldStreak(ctx)
	}
	return nil, fmt.Errorf("unknown ItemProgress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemProgressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case itemprogress.FieldNextReviewDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNextReviewDate(v)
		return nil
	case itemprogress.FieldIntervalDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntervalDays(v)
		return nil
	case itemprogress.FieldEaseFactor:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEaseFactor(v)
		return nil
	case itemprogress.FieldStreak:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreak(v)
		return nil
	}
	return fmt.Errorf("unknown ItemProgress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemProgressMutation) AddedFields() []string {
	var fields []string
	if m.addinterval_days != nil {
		fields = append(fields, itemprogress.FieldIntervalDays)
	}
	if m.addease_factor != nil {
		fields = append(fields, itemprogress.FieldEaseFactor)
	}
	if m.addstreak != nil {
		fields = append(fields, itemprogress.FieldStreak)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemProgressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case itemprogress.FieldIntervalDays:
		return m.AddedIntervalDays()
	case itemprogress.FieldEaseFactor:
		return m.AddedEaseFactor()
	case itemprogress.FieldStreak:
		return m.AddedStreak()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemProgressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case itemprogress.FieldIntervalDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIntervalDays(v)
		return nil
	case itemprogress.FieldEaseFactor:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEaseFactor(v)
		return nil
	case itemprogress.FieldStreak:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStreak(v)
		return nil
	}
	return fmt.Errorf("unknown ItemProgress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemProgressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemProgressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemProgressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ItemProgress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemProgressMutation) ResetField(name string) error {
	switch name {
	case itemprogress.FieldNextReviewDate:
		m.ResetNextReviewDate()
		return nil
	case itemprogress.FieldIntervalDays:
		m.ResetIntervalDays()
		return nil
	case itemprogress.FieldEaseFactor:
		m.ResetEaseFactor()
		return nil
	case itemprogress.FieldStreak:
		m.ResetStreak()
		return nil
	}
	return fmt.Errorf("unknown ItemProgress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemProgressMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.item != nil {
		edges = append(edges, itemprogress.EdgeItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemProgressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case itemprogress.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemProgressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemProgressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemProgressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditem {
		edges = append(edges, itemprogress.EdgeItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemProgressMutation) EdgeCleared(name string) bool {
	switch name {
	case itemprogress.EdgeItem:
		return m.cleareditem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemProgressMutation) ClearEdge(name string) error {
	switch name {
	case itemprogress.EdgeItem:
		m.ClearItem()
		return nil
	}
	return fmt.Errorf("unknown ItemProgress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemProgressMutation) ResetEdge(name string) error {
	switch name {
	case itemprogress.EdgeItem:
		m.ResetItem()
		return nil
	}
	return fmt.Errorf("unknown ItemProgress edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	value         *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Settings, error)
	predicates    []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *SettingsMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *SettingsMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *SettingsMutation) ResetKey() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *SettingsMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *SettingsMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ClearValue clears the value of the "value" field.
func (m *SettingsMutation) ClearValue() {
	m.value = nil
	m.clearedFields[settings.FieldValue] = struct{}{}
}

// ValueCleared returns if the "value" field was cleared in this mutation.
func (m *SettingsMutation) ValueCleared() bool {
	_, ok := m.clearedFields[settings.FieldValue]
	return ok
}

// ResetValue resets all changes to the "value" field.
func (m *SettingsMutation) ResetValue() {
	m.value = nil
	delete(m.clearedFields, settings.FieldValue)
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Settings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.key != nil {
		fields = append(fields, settings.FieldKey)
	}
	if m.value != nil {
		fields = append(fields, settings.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldKey:
		return m.Key()
	case settings.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldKey:
		return m.OldKey(ctx)
	case settings.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case settings.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(settings.FieldValue) {
		fields = append(fields, settings.FieldValue)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	switch name {
	case settings.FieldValue:
		m.ClearValue()
		return nil
	}
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldKey:
		m.ResetKey()
		return nil
	case settings.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Settings edge %s", name)
}

// TopicMutation represents an operation that mutates the Topic nodes in the graph.
type TopicMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	instructions  *string
	clearedFields map[string]struct{}
	items         map[int]struct{}
	removeditems  map[int]struct{}
	cleareditems  bool
	done          bool
	oldValue      func(context.Context) (*Topic, error)
	predicates    []predicate.Topic
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows management of the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for the Topic entity.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the ID field of the mutation.
func withTopicID(id int) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TopicMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Topic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TopicMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TopicMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TopicMutation) ResetName() {
	m.name = nil
}

// SetInstructions sets the "instructions" field.
func (m *TopicMutation) SetInstructions(s string) {
	m.instructions = &s
}

// Instructions returns the value of the "instructions" field in the mutation.
func (m *TopicMutation) Instructions() (r string, exists bool) {
	v := m.instructions
	if v == nil {
		return
	}
	return *v, true
}

// OldInstructions returns the old "instructions" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldInstructions(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstructions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstructions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstructions: %w", err)
	}
	return oldValue.Instructions, nil
}

// ResetInstructions resets all changes to the "instructions" field.
func (m *TopicMutation) ResetInstructions() {
	m.instructions = nil
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *TopicMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *TopicMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *TopicMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *TopicMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *TopicMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *TopicMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *TopicMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// Where appends a list predicates to the TopicMutation builder.
func (m *TopicMutation) Where(ps ...predicate.Topic) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TopicMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TopicMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Topic, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TopicMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, topic.FieldName)
	}
	if m.instructions != nil {
		fields = append(fields, topic.FieldInstructions)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldName:
		return m.Name()
	case topic.FieldInstructions:
		return m.Instructions()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldName:
		return m.OldName(ctx)
	case topic.FieldInstructions:
		return m.OldInstructions(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case topic.FieldInstructions:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstructions(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TopicMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldName:
		m.ResetName()
		return nil
	case topic.FieldInstructions:
		m.ResetInstructions()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.items != nil {
		edges = append(edges, topic.EdgeItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case topic.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeditems != nil {
		edges = append(edges, topic.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case topic.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditems {
		edges = append(edges, topic.EdgeItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	switch name {
	case topic.EdgeItems:
		return m.cleareditems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	switch name {
	case topic.EdgeItems:
		m.ResetItems()
		return nil
	}
	return fmt.Errorf("unknown Topic edge %s", name)
}
