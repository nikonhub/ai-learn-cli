// Code generated by ent, DO NOT EDIT.

package itemprogress

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the itemprogress type in the database.
	Label = "item_progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNextReviewDate holds the string denoting the next_review_date field in the database.
	FieldNextReviewDate = "next_review_date"
	// FieldIntervalDays holds the string denoting the interval_days field in the database.
	FieldIntervalDays = "interval_days"
	// FieldEaseFactor holds the string denoting the ease_factor field in the database.
	FieldEaseFactor = "ease_factor"
	// FieldStreak holds the string denoting the streak field in the database.
	FieldStreak = "streak"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// Table holds the table name of the itemprogress in the database.
	Table = "item_progresses"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "item_progresses"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_progress"
)

// Columns holds all SQL columns for itemprogress fields.
var Columns = []string{
	FieldID,
	FieldNextReviewDate,
	FieldIntervalDays,
	FieldEaseFactor,
	FieldStreak,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "item_progresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"item_progress",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIntervalDays holds the default value on creation for the "interval_days" field.
	DefaultIntervalDays int
	// DefaultEaseFactor holds the default value on creation for the "ease_factor" field.
	DefaultEaseFactor float64
	// DefaultStreak holds the default value on creation for the "streak" field.
	DefaultStreak int
)

// OrderOption defines the ordering options for the ItemProgress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNextReviewDate orders the results by the next_review_date field.
func ByNextReviewDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextReviewDate, opts...).ToFunc()
}

// ByIntervalDays orders the results by the interval_days field.
func ByIntervalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntervalDays, opts...).ToFunc()
}

// ByEaseFactor orders the results by the ease_factor field.
func ByEaseFactor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEaseFactor, opts...).ToFunc()
}

// ByStreak orders the results by the streak field.
func ByStreak(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreak, opts...).ToFunc()
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ItemTable, ItemColumn),
	)
}
