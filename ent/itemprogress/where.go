// Code generated by ent, DO NOT EDIT.

package itemprogress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nikonhub/ai-learn-cli/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLTE(FieldID, id))
}

// NextReviewDate applies equality check predicate on the "next_review_date" field. It's identical to NextReviewDateEQ.
func NextReviewDate(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldNextReviewDate, v))
}

// IntervalDays applies equality check predicate on the "interval_days" field. It's identical to IntervalDaysEQ.
func IntervalDays(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldIntervalDays, v))
}

// EaseFactor applies equality check predicate on the "ease_factor" field. It's identical to EaseFactorEQ.
func EaseFactor(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldEaseFactor, v))
}

// Streak applies equality check predicate on the "streak" field. It's identical to StreakEQ.
func Streak(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldStreak, v))
}

// NextReviewDateEQ applies the EQ predicate on the "next_review_date" field.
func NextReviewDateEQ(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldNextReviewDate, v))
}

// NextReviewDateNEQ applies the NEQ predicate on the "next_review_date" field.
func NextReviewDateNEQ(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNEQ(FieldNextReviewDate, v))
}

// NextReviewDateIn applies the In predicate on the "next_review_date" field.
func NextReviewDateIn(vs ...time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldIn(FieldNextReviewDate, vs...))
}

// NextReviewDateNotIn applies the NotIn predicate on the "next_review_date" field.
func NextReviewDateNotIn(vs ...time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNotIn(FieldNextReviewDate, vs...))
}

// NextReviewDateGT applies the GT predicate on the "next_review_date" field.
func NextReviewDateGT(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGT(FieldNextReviewDate, v))
}

// NextReviewDateGTE applies the GTE predicate on the "next_review_date" field.
func NextReviewDateGTE(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGTE(FieldNextReviewDate, v))
}

// NextReviewDateLT applies the LT predicate on the "next_review_date" field.
func NextReviewDateLT(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLT(FieldNextReviewDate, v))
}

// NextReviewDateLTE applies the LTE predicate on the "next_review_date" field.
func NextReviewDateLTE(v time.Time) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLTE(FieldNextReviewDate, v))
}

// IntervalDaysEQ applies the EQ predicate on the "interval_days" field.
func IntervalDaysEQ(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldIntervalDays, v))
}

// IntervalDaysNEQ applies the NEQ predicate on the "interval_days" field.
func IntervalDaysNEQ(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNEQ(FieldIntervalDays, v))
}

// IntervalDaysIn applies the In predicate on the "interval_days" field.
func IntervalDaysIn(vs ...int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldIn(FieldIntervalDays, vs...))
}

// IntervalDaysNotIn applies the NotIn predicate on the "interval_days" field.
func IntervalDaysNotIn(vs ...int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNotIn(FieldIntervalDays, vs...))
}

// IntervalDaysGT applies the GT predicate on the "interval_days" field.
func IntervalDaysGT(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGT(FieldIntervalDays, v))
}

// IntervalDaysGTE applies the GTE predicate on the "interval_days" field.
func IntervalDaysGTE(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGTE(FieldIntervalDays, v))
}

// IntervalDaysLT applies the LT predicate on the "interval_days" field.
func IntervalDaysLT(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLT(FieldIntervalDays, v))
}

// IntervalDaysLTE applies the LTE predicate on the "interval_days" field.
func IntervalDaysLTE(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLTE(FieldIntervalDays, v))
}

// EaseFactorEQ applies the EQ predicate on the "ease_factor" field.
func EaseFactorEQ(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldEaseFactor, v))
}

// EaseFactorNEQ applies the NEQ predicate on the "ease_factor" field.
func EaseFactorNEQ(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNEQ(FieldEaseFactor, v))
}

// EaseFactorIn applies the In predicate on the "ease_factor" field.
func EaseFactorIn(vs ...float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldIn(FieldEaseFactor, vs...))
}

// EaseFactorNotIn applies the NotIn predicate on the "ease_factor" field.
func EaseFactorNotIn(vs ...float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNotIn(FieldEaseFactor, vs...))
}

// EaseFactorGT applies the GT predicate on the "ease_factor" field.
func EaseFactorGT(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGT(FieldEaseFactor, v))
}

// EaseFactorGTE applies the GTE predicate on the "ease_factor" field.
func EaseFactorGTE(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGTE(FieldEaseFactor, v))
}

// EaseFactorLT applies the LT predicate on the "ease_factor" field.
func EaseFactorLT(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLT(FieldEaseFactor, v))
}

// EaseFactorLTE applies the LTE predicate on the "ease_factor" field.
func EaseFactorLTE(v float64) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLTE(FieldEaseFactor, v))
}

// StreakEQ applies the EQ predicate on the "streak" field.
func StreakEQ(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldEQ(FieldStreak, v))
}

// StreakNEQ applies the NEQ predicate on the "streak" field.
func StreakNEQ(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNEQ(FieldStreak, v))
}

// StreakIn applies the In predicate on the "streak" field.
func StreakIn(vs ...int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldIn(FieldStreak, vs...))
}

// StreakNotIn applies the NotIn predicate on the "streak" field.
func StreakNotIn(vs ...int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldNotIn(FieldStreak, vs...))
}

// StreakGT applies the GT predicate on the "streak" field.
func StreakGT(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGT(FieldStreak, v))
}

// StreakGTE applies the GTE predicate on the "streak" field.
func StreakGTE(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldGTE(FieldStreak, v))
}

// StreakLT applies the LT predicate on the "streak" field.
func StreakLT(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLT(FieldStreak, v))
}

// StreakLTE applies the LTE predicate on the "streak" field.
func StreakLTE(v int) predicate.ItemProgress {
	return predicate.ItemProgress(sql.FieldLTE(FieldStreak, v))
}

// HasItem applies the HasEdge predicate on the "item" edge.
func HasItem() predicate.ItemProgress {
	return predicate.ItemProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemTable, ItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemWith applies the HasEdge predicate on the "item" edge with a given conditions (other predicates).
func HasItemWith(preds ...predicate.Item) predicate.ItemProgress {
	return predicate.ItemProgress(func(s *sql.Selector) {
		step := newItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ItemProgress) predicate.ItemProgress {
	return predicate.ItemProgress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ItemProgress) predicate.ItemProgress {
	return predicate.ItemProgress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ItemProgress) predicate.ItemProgress {
	return predicate.ItemProgress(sql.NotPredicates(p))
}
