// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nikonhub/ai-learn-cli/ent/generatedproblem"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/predicate"
)

// GeneratedProblemUpdate is the builder for updating GeneratedProblem entities.
type GeneratedProblemUpdate struct {
	config
	hooks    []Hook
	mutation *GeneratedProblemMutation
}

// Where appends a list predicates to the GeneratedProblemUpdate builder.
func (gpu *GeneratedProblemUpdate) Where(ps ...predicate.GeneratedProblem) *GeneratedProblemUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetProblemText sets the "problem_text" field.
func (gpu *GeneratedProblemUpdate) SetProblemText(s string) *GeneratedProblemUpdate {
	gpu.mutation.SetProblemText(s)
	return gpu
}

// SetNillableProblemText sets the "problem_text" field if the given value is not nil.
func (gpu *GeneratedProblemUpdate) SetNillableProblemText(s *string) *GeneratedProblemUpdate {
	if s != nil {
		gpu.SetProblemText(*s)
	}
	return gpu
}

// SetGeneratedOn sets the "generated_on" field.
func (gpu *GeneratedProblemUpdate) SetGeneratedOn(t time.Time) *GeneratedProblemUpdate {
	gpu.mutation.SetGeneratedOn(t)
	return gpu
}

// SetNillableGeneratedOn sets the "generated_on" field if the given value is not nil.
func (gpu *GeneratedProblemUpdate) SetNillableGeneratedOn(t *time.Time) *GeneratedProblemUpdate {
	if t != nil {
		gpu.SetGeneratedOn(*t)
	}
	return gpu
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (gpu *GeneratedProblemUpdate) SetItemID(id int) *GeneratedProblemUpdate {
	gpu.mutation.SetItemID(id)
	return gpu
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (gpu *GeneratedProblemUpdate) SetNillableItemID(id *int) *GeneratedProblemUpdate {
	if id != nil {
		gpu = gpu.SetItemID(*id)
	}
	return gpu
}

// SetItem sets the "item" edge to the Item entity.
func (gpu *GeneratedProblemUpdate) SetItem(i *Item) *GeneratedProblemUpdate {
	return gpu.SetItemID(i.ID)
}

// Mutation returns the GeneratedProblemMutation object of the builder.
func (gpu *GeneratedProblemUpdate) Mutation() *GeneratedProblemMutation {
	return gpu.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (gpu *GeneratedProblemUpdate) ClearItem() *GeneratedProblemUpdate {
	gpu.mutation.ClearItem()
	return gpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GeneratedProblemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gpu.sqlSave, gpu.mutation, gpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GeneratedProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GeneratedProblemUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GeneratedProblemUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpu *GeneratedProblemUpdate) check() error {
	if v, ok := gpu.mutation.ProblemText(); ok {
		if err := generatedproblem.ProblemTextValidator(v); err != nil {
			return &ValidationError{Name: "problem_text", err: fmt.Errorf(`ent: validator failed for field "GeneratedProblem.problem_text": %w`, err)}
		}
	}
	return nil
}

func (gpu *GeneratedProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(generatedproblem.Table, generatedproblem.Columns, sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt))
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpu.mutation.ProblemText(); ok {
		_spec.SetField(generatedproblem.FieldProblemText, field.TypeString, value)
	}
	if value, ok := gpu.mutation.GeneratedOn(); ok {
		_spec.SetField(generatedproblem.FieldGeneratedOn, field.TypeTime, value)
	}
	if gpu.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedproblem.ItemTable,
			Columns: []string{generatedproblem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedproblem.ItemTable,
			Columns: []string{generatedproblem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generatedproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gpu.mutation.done = true
	return n, nil
}

// GeneratedProblemUpdateOne is the builder for updating a single GeneratedProblem entity.
type GeneratedProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GeneratedProblemMutation
}

// SetProblemText sets the "problem_text" field.
func (gpuo *GeneratedProblemUpdateOne) SetProblemText(s string) *GeneratedProblemUpdateOne {
	gpuo.mutation.SetProblemText(s)
	return gpuo
}

// SetNillableProblemText sets the "problem_text" field if the given value is not nil.
func (gpuo *GeneratedProblemUpdateOne) SetNillableProblemText(s *string) *GeneratedProblemUpdateOne {
	if s != nil {
		gpuo.SetProblemText(*s)
	}
	return gpuo
}

// SetGeneratedOn sets the "generated_on" field.
func (gpuo *GeneratedProblemUpdateOne) SetGeneratedOn(t time.Time) *GeneratedProblemUpdateOne {
	gpuo.mutation.SetGeneratedOn(t)
	return gpuo
}

// SetNillableGeneratedOn sets the "generated_on" field if the given value is not nil.
func (gpuo *GeneratedProblemUpdateOne) SetNillableGeneratedOn(t *time.Time) *GeneratedProblemUpdateOne {
	if t != nil {
		gpuo.SetGeneratedOn(*t)
	}
	return gpuo
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (gpuo *GeneratedProblemUpdateOne) SetItemID(id int) *GeneratedProblemUpdateOne {
	gpuo.mutation.SetItemID(id)
	return gpuo
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (gpuo *GeneratedProblemUpdateOne) SetNillableItemID(id *int) *GeneratedProblemUpdateOne {
	if id != nil {
		gpuo = gpuo.SetItemID(*id)
	}
	return gpuo
}

// SetItem sets the "item" edge to the Item entity.
func (gpuo *GeneratedProblemUpdateOne) SetItem(i *Item) *GeneratedProblemUpdateOne {
	return gpuo.SetItemID(i.ID)
}

// Mutation returns the GeneratedProblemMutation object of the builder.
func (gpuo *GeneratedProblemUpdateOne) Mutation() *GeneratedProblemMutation {
	return gpuo.mutation
}

// ClearItem clears the "item" edge to the Item entity.
func (gpuo *GeneratedProblemUpdateOne) ClearItem() *GeneratedProblemUpdateOne {
	gpuo.mutation.ClearItem()
	return gpuo
}

// Where appends a list predicates to the GeneratedProblemUpdate builder.
func (gpuo *GeneratedProblemUpdateOne) Where(ps ...predicate.GeneratedProblem) *GeneratedProblemUpdateOne {
	gpuo.mutation.Where(ps...)
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GeneratedProblemUpdateOne) Select(field string, fields ...string) *GeneratedProblemUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GeneratedProblem entity.
func (gpuo *GeneratedProblemUpdateOne) Save(ctx context.Context) (*GeneratedProblem, error) {
	return withHooks(ctx, gpuo.sqlSave, gpuo.mutation, gpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GeneratedProblemUpdateOne) SaveX(ctx context.Context) *GeneratedProblem {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GeneratedProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GeneratedProblemUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpuo *GeneratedProblemUpdateOne) check() error {
	if v, ok := gpuo.mutation.ProblemText(); ok {
		if err := generatedproblem.ProblemTextValidator(v); err != nil {
			return &ValidationError{Name: "problem_text", err: fmt.Errorf(`ent: validator failed for field "GeneratedProblem.problem_text": %w`, err)}
		}
	}
	return nil
}

func (gpuo *GeneratedProblemUpdateOne) sqlSave(ctx context.Context) (_node *GeneratedProblem, err error) {
	if err := gpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(generatedproblem.Table, generatedproblem.Columns, sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt))
	id, ok := gpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GeneratedProblem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generatedproblem.FieldID)
		for _, f := range fields {
			if !generatedproblem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generatedproblem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpuo.mutation.ProblemText(); ok {
		_spec.SetField(generatedproblem.FieldProblemText, field.TypeString, value)
	}
	if value, ok := gpuo.mutation.GeneratedOn(); ok {
		_spec.SetField(generatedproblem.FieldGeneratedOn, field.TypeTime, value)
	}
	if gpuo.mutation.ItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedproblem.ItemTable,
			Columns: []string{generatedproblem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedproblem.ItemTable,
			Columns: []string{generatedproblem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GeneratedProblem{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generatedproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gpuo.mutation.done = true
	return _node, nil
}
