// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/itemprogress"
)

// ItemProgress is the model entity for the ItemProgress schema.
type ItemProgress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NextReviewDate holds the value of the "next_review_date" field.
	NextReviewDate time.Time `json:"next_review_date,omitempty"`
	// IntervalDays holds the value of the "interval_days" field.
	IntervalDays int `json:"interval_days,omitempty"`
	// EaseFactor holds the value of the "ease_factor" field.
	EaseFactor float64 `json:"ease_factor,omitempty"`
	// Streak holds the value of the "streak" field.
	Streak int `json:"streak,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemProgressQuery when eager-loading is set.
	Edges         ItemProgressEdges `json:"edges"`
	item_progress *int
	selectValues  sql.SelectValues
}

// ItemProgressEdges holds the relations/edges for other nodes in the graph.
type ItemProgressEdges struct {
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemProgressEdges) ItemOrErr() (*Item, error) {
	if e.Item != nil {
		return e.Item, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: item.Label}
	}
	return nil, &NotLoadedError{edge: "item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ItemProgress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case itemprogress.FieldEaseFactor:
			values[i] = new(sql.NullFloat64)
		case itemprogress.FieldID, itemprogress.FieldIntervalDays, itemprogress.FieldStreak:
			values[i] = new(sql.NullInt64)
		case itemprogress.FieldNextReviewDate:
			values[i] = new(sql.NullTime)
		case itemprogress.ForeignKeys[0]: // item_progress
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ItemProgress fields.
func (ip *ItemProgress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case itemprogress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ip.ID = int(value.Int64)
		case itemprogress.FieldNextReviewDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_review_date", values[i])
			} else if value.Valid {
				ip.NextReviewDate = value.Time
			}
		case itemprogress.FieldIntervalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_days", values[i])
			} else if value.Valid {
				ip.IntervalDays = int(value.Int64)
			}
		case itemprogress.FieldEaseFactor:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ease_factor", values[i])
			} else if value.Valid {
				ip.EaseFactor = value.Float64
			}
		case itemprogress.FieldStreak:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field streak", values[i])
			} else if value.Valid {
				ip.Streak = int(value.Int64)
			}
		case itemprogress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field item_progress", value)
			} else if value.Valid {
				ip.item_progress = new(int)
				*ip.item_progress = int(value.Int64)
			}
		default:
			ip.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ItemProgress.
// This includes values selected through modifiers, order, etc.
func (ip *ItemProgress) Value(name string) (ent.Value, error) {
	return ip.selectValues.Get(name)
}

// QueryItem queries the "item" edge of the ItemProgress entity.
func (ip *ItemProgress) QueryItem() *ItemQuery {
	return NewItemProgressClient(ip.config).QueryItem(ip)
}

// Update returns a builder for updating this ItemProgress.
// Note that you need to call ItemProgress.Unwrap() before calling this method if this ItemProgress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *ItemProgress) Update() *ItemProgressUpdateOne {
	return NewItemProgressClient(ip.config).UpdateOne(ip)
}

// Unwrap unwraps the ItemProgress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ip *ItemProgress) Unwrap() *ItemProgress {
	_tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("ent: ItemProgress is not a transactional entity")
	}
	ip.config.driver = _tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *ItemProgress) String() string {
	var builder strings.Builder
	builder.WriteString("ItemProgress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ip.ID))
	builder.WriteString("next_review_date=")
	builder.WriteString(ip.NextReviewDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("interval_days=")
	builder.WriteString(fmt.Sprintf("%v", ip.IntervalDays))
	builder.WriteString(", ")
	builder.WriteString("ease_factor=")
	builder.WriteString(fmt.Sprintf("%v", ip.EaseFactor))
	builder.WriteString(", ")
	builder.WriteString("streak=")
	builder.WriteString(fmt.Sprintf("%v", ip.Streak))
	builder.WriteByte(')')
	return builder.String()
}

// ItemProgresses is a parsable slice of ItemProgress.
type ItemProgresses []*ItemProgress
