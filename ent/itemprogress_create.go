// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/itemprogress"
)

// ItemProgressCreate is the builder for creating a ItemProgress entity.
type ItemProgressCreate struct {
	config
	mutation *ItemProgressMutation
	hooks    []Hook
}

// SetNextReviewDate sets the "next_review_date" field.
func (ipc *ItemProgressCreate) SetNextReviewDate(t time.Time) *ItemProgressCreate {
	ipc.mutation.SetNextReviewDate(t)
	return ipc
}

// SetIntervalDays sets the "interval_days" field.
func (ipc *ItemProgressCreate) SetIntervalDays(i int) *ItemProgressCreate {
	ipc.mutation.SetIntervalDays(i)
	return ipc
}

// SetNillableIntervalDays sets the "interval_days" field if the given value is not nil.
func (ipc *ItemProgressCreate) SetNillableIntervalDays(i *int) *ItemProgressCreate {
	if i != nil {
		ipc.SetIntervalDays(*i)
	}
	return ipc
}

// SetEaseFactor sets the "ease_factor" field.
func (ipc *ItemProgressCreate) SetEaseFactor(f float64) *ItemProgressCreate {
	ipc.mutation.SetEaseFactor(f)
	return ipc
}

// SetNillableEaseFactor sets the "ease_factor" field if the given value is not nil.
func (ipc *ItemProgressCreate) SetNillableEaseFactor(f *float64) *ItemProgressCreate {
	if f != nil {
		ipc.SetEaseFactor(*f)
	}
	return ipc
}

// SetStreak sets the "streak" field.
func (ipc *ItemProgressCreate) SetStreak(i int) *ItemProgressCreate {
	ipc.mutation.SetStreak(i)
	return ipc
}

// SetNillableStreak sets the "streak" field if the given value is not nil.
func (ipc *ItemProgressCreate) SetNillableStreak(i *int) *ItemProgressCreate {
	if i != nil {
		ipc.SetStreak(*i)
	}
	return ipc
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (ipc *ItemProgressCreate) SetItemID(id int) *ItemProgressCreate {
	ipc.mutation.SetItemID(id)
	return ipc
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (ipc *ItemProgressCreate) SetNillableItemID(id *int) *ItemProgressCreate {
	if id != nil {
		ipc = ipc.SetItemID(*id)
	}
	return ipc
}

// SetItem sets the "item" edge to the Item entity.
func (ipc *ItemProgressCreate) SetItem(i *Item) *ItemProgressCreate {
	return ipc.SetItemID(i.ID)
}

// Mutation returns the ItemProgressMutation object of the builder.
func (ipc *ItemProgressCreate) Mutation() *ItemProgressMutation {
	return ipc.mutation
}

// Save creates the ItemProgress in the database.
func (ipc *ItemProgressCreate) Save(ctx context.Context) (*ItemProgress, error) {
	ipc.defaults()
	return withHooks(ctx, ipc.sqlSave, ipc.mutation, ipc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *ItemProgressCreate) SaveX(ctx context.Context) *ItemProgress {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipc *ItemProgressCreate) Exec(ctx context.Context) error {
	_, err := ipc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipc *ItemProgressCreate) ExecX(ctx context.Context) {
	if err := ipc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipc *ItemProgressCreate) defaults() {
	if _, ok := ipc.mutation.IntervalDays(); !ok {
		v := itemprogress.DefaultIntervalDays
		ipc.mutation.SetIntervalDays(v)
	}
	if _, ok := ipc.mutation.EaseFactor(); !ok {
		v := itemprogress.DefaultEaseFactor
		ipc.mutation.SetEaseFactor(v)
	}
	if _, ok := ipc.mutation.Streak(); !ok {
		v := itemprogress.DefaultStreak
		ipc.mutation.SetStreak(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipc *ItemProgressCreate) check() error {
	if _, ok := ipc.mutation.NextReviewDate(); !ok {
		return &ValidationError{Name: "next_review_date", err: errors.New(`ent: missing required field "ItemProgress.next_review_date"`)}
	}
	if _, ok := ipc.mutation.IntervalDays(); !ok {
		return &ValidationError{Name: "interval_days", err: errors.New(`ent: missing required field "ItemProgress.interval_days"`)}
	}
	if _, ok := ipc.mutation.EaseFactor(); !ok {
		return &ValidationError{Name: "ease_factor", err: errors.New(`ent: missing required field "ItemProgress.ease_factor"`)}
	}
	if _, ok := ipc.mutation.Streak(); !ok {
		return &ValidationError{Name: "streak", err: errors.New(`ent: missing required field "ItemProgress.streak"`)}
	}
	return nil
}

func (ipc *ItemProgressCreate) sqlSave(ctx context.Context) (*ItemProgress, error) {
	if err := ipc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ipc.mutation.id = &_node.ID
	ipc.mutation.done = true
	return _node, nil
}

func (ipc *ItemProgressCreate) createSpec() (*ItemProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &ItemProgress{config: ipc.config}
		_spec = sqlgraph.NewCreateSpec(itemprogress.Table, sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt))
	)
	if value, ok := ipc.mutation.NextReviewDate(); ok {
		_spec.SetField(itemprogress.FieldNextReviewDate, field.TypeTime, value)
		_node.NextReviewDate = value
	}
	if value, ok := ipc.mutation.IntervalDays(); ok {
		_spec.SetField(itemprogress.FieldIntervalDays, field.TypeInt, value)
		_node.IntervalDays = value
	}
	if value, ok := ipc.mutation.EaseFactor(); ok {
		_spec.SetField(itemprogress.FieldEaseFactor, field.TypeFloat64, value)
		_node.EaseFactor = value
	}
	if value, ok := ipc.mutation.Streak(); ok {
		_spec.SetField(itemprogress.FieldStreak, field.TypeInt, value)
		_node.Streak = value
	}
	if nodes := ipc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   itemprogress.ItemTable,
			Columns: []string{itemprogress.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_progress = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemProgressCreateBulk is the builder for creating many ItemProgress entities in bulk.
type ItemProgressCreateBulk struct {
	config
	err      error
	builders []*ItemProgressCreate
}

// Save creates the ItemProgress entities in the database.
func (ipcb *ItemProgressCreateBulk) Save(ctx context.Context) ([]*ItemProgress, error) {
	if ipcb.err != nil {
		return nil, ipcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*ItemProgress, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *ItemProgressCreateBulk) SaveX(ctx context.Context) []*ItemProgress {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipcb *ItemProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := ipcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipcb *ItemProgressCreateBulk) ExecX(ctx context.Context) {
	if err := ipcb.Exec(ctx); err != nil {
		panic(err)
	}
}
