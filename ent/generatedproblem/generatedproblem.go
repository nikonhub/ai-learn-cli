// Code generated by ent, DO NOT EDIT.

package generatedproblem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the generatedproblem type in the database.
	Label = "generated_problem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProblemText holds the string denoting the problem_text field in the database.
	FieldProblemText = "problem_text"
	// FieldGeneratedOn holds the string denoting the generated_on field in the database.
	FieldGeneratedOn = "generated_on"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// Table holds the table name of the generatedproblem in the database.
	Table = "generated_problems"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "generated_problems"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_generated_problems"
)

// Columns holds all SQL columns for generatedproblem fields.
var Columns = []string{
	FieldID,
	FieldProblemText,
	FieldGeneratedOn,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "generated_problems"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"item_generated_problems",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ProblemTextValidator is a validator for the "problem_text" field. It is called by the builders before save.
	ProblemTextValidator func(string) error
	// DefaultGeneratedOn holds the default value on creation for the "generated_on" field.
	DefaultGeneratedOn func() time.Time
)

// OrderOption defines the ordering options for the GeneratedProblem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProblemText orders the results by the problem_text field.
func ByProblemText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProblemText, opts...).ToFunc()
}

// ByGeneratedOn orders the results by the generated_on field.
func ByGeneratedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeneratedOn, opts...).ToFunc()
}

// ByItemField orders the results by item field.
func ByItemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemStep(), sql.OrderByField(field, opts...))
	}
}
func newItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ItemTable, ItemColumn),
	)
}
