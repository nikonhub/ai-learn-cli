// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nikonhub/ai-learn-cli/ent/generatedproblem"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/itemprogress"
	"github.com/nikonhub/ai-learn-cli/ent/predicate"
	"github.com/nikonhub/ai-learn-cli/ent/topic"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *ItemUpdate) SetName(s string) *ItemUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableName(s *string) *ItemUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *ItemUpdate) SetDescription(s string) *ItemUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDescription(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *ItemUpdate) ClearDescription() *ItemUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (iu *ItemUpdate) SetTopicID(id int) *ItemUpdate {
	iu.mutation.SetTopicID(id)
	return iu
}

// SetNillableTopicID sets the "topic" edge to the Topic entity by ID if the given value is not nil.
func (iu *ItemUpdate) SetNillableTopicID(id *int) *ItemUpdate {
	if id != nil {
		iu = iu.SetTopicID(*id)
	}
	return iu
}

// SetTopic sets the "topic" edge to the Topic entity.
func (iu *ItemUpdate) SetTopic(t *Topic) *ItemUpdate {
	return iu.SetTopicID(t.ID)
}

// AddGeneratedProblemIDs adds the "generated_problems" edge to the GeneratedProblem entity by IDs.
func (iu *ItemUpdate) AddGeneratedProblemIDs(ids ...int) *ItemUpdate {
	iu.mutation.AddGeneratedProblemIDs(ids...)
	return iu
}

// AddGeneratedProblems adds the "generated_problems" edges to the GeneratedProblem entity.
func (iu *ItemUpdate) AddGeneratedProblems(g ...*GeneratedProblem) *ItemUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return iu.AddGeneratedProblemIDs(ids...)
}

// AddProgresIDs adds the "progress" edge to the ItemProgress entity by IDs.
func (iu *ItemUpdate) AddProgresIDs(ids ...int) *ItemUpdate {
	iu.mutation.AddProgresIDs(ids...)
	return iu
}

// AddProgress adds the "progress" edges to the ItemProgress entity.
func (iu *ItemUpdate) AddProgress(i ...*ItemProgress) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.AddProgresIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (iu *ItemUpdate) ClearTopic() *ItemUpdate {
	iu.mutation.ClearTopic()
	return iu
}

// ClearGeneratedProblems clears all "generated_problems" edges to the GeneratedProblem entity.
func (iu *ItemUpdate) ClearGeneratedProblems() *ItemUpdate {
	iu.mutation.ClearGeneratedProblems()
	return iu
}

// RemoveGeneratedProblemIDs removes the "generated_problems" edge to GeneratedProblem entities by IDs.
func (iu *ItemUpdate) RemoveGeneratedProblemIDs(ids ...int) *ItemUpdate {
	iu.mutation.RemoveGeneratedProblemIDs(ids...)
	return iu
}

// RemoveGeneratedProblems removes "generated_problems" edges to GeneratedProblem entities.
func (iu *ItemUpdate) RemoveGeneratedProblems(g ...*GeneratedProblem) *ItemUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return iu.RemoveGeneratedProblemIDs(ids...)
}

// ClearProgress clears all "progress" edges to the ItemProgress entity.
func (iu *ItemUpdate) ClearProgress() *ItemUpdate {
	iu.mutation.ClearProgress()
	return iu
}

// RemoveProgresIDs removes the "progress" edge to ItemProgress entities by IDs.
func (iu *ItemUpdate) RemoveProgresIDs(ids ...int) *ItemUpdate {
	iu.mutation.RemoveProgresIDs(ids...)
	return iu
}

// RemoveProgress removes "progress" edges to ItemProgress entities.
func (iu *ItemUpdate) RemoveProgress(i ...*ItemProgress) *ItemUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iu.RemoveProgresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ItemUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Item.name": %w`, err)}
		}
	}
	return nil
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
	}
	if iu.mutation.DescriptionCleared() {
		_spec.ClearField(item.FieldDescription, field.TypeString)
	}
	if iu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.TopicTable,
			Columns: []string{item.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.TopicTable,
			Columns: []string{item.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.GeneratedProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.GeneratedProblemsTable,
			Columns: []string{item.GeneratedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedGeneratedProblemsIDs(); len(nodes) > 0 && !iu.mutation.GeneratedProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.GeneratedProblemsTable,
			Columns: []string{item.GeneratedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.GeneratedProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.GeneratedProblemsTable,
			Columns: []string{item.GeneratedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ProgressTable,
			Columns: []string{item.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedProgressIDs(); len(nodes) > 0 && !iu.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ProgressTable,
			Columns: []string{item.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ProgressTable,
			Columns: []string{item.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetName sets the "name" field.
func (iuo *ItemUpdateOne) SetName(s string) *ItemUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableName(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *ItemUpdateOne) SetDescription(s string) *ItemUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDescription(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *ItemUpdateOne) ClearDescription() *ItemUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetTopicID sets the "topic" edge to the Topic entity by ID.
func (iuo *ItemUpdateOne) SetTopicID(id int) *ItemUpdateOne {
	iuo.mutation.SetTopicID(id)
	return iuo
}

// SetNillableTopicID sets the "topic" edge to the Topic entity by ID if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTopicID(id *int) *ItemUpdateOne {
	if id != nil {
		iuo = iuo.SetTopicID(*id)
	}
	return iuo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (iuo *ItemUpdateOne) SetTopic(t *Topic) *ItemUpdateOne {
	return iuo.SetTopicID(t.ID)
}

// AddGeneratedProblemIDs adds the "generated_problems" edge to the GeneratedProblem entity by IDs.
func (iuo *ItemUpdateOne) AddGeneratedProblemIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.AddGeneratedProblemIDs(ids...)
	return iuo
}

// AddGeneratedProblems adds the "generated_problems" edges to the GeneratedProblem entity.
func (iuo *ItemUpdateOne) AddGeneratedProblems(g ...*GeneratedProblem) *ItemUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return iuo.AddGeneratedProblemIDs(ids...)
}

// AddProgresIDs adds the "progress" edge to the ItemProgress entity by IDs.
func (iuo *ItemUpdateOne) AddProgresIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.AddProgresIDs(ids...)
	return iuo
}

// AddProgress adds the "progress" edges to the ItemProgress entity.
func (iuo *ItemUpdateOne) AddProgress(i ...*ItemProgress) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.AddProgresIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (iuo *ItemUpdateOne) ClearTopic() *ItemUpdateOne {
	iuo.mutation.ClearTopic()
	return iuo
}

// ClearGeneratedProblems clears all "generated_problems" edges to the GeneratedProblem entity.
func (iuo *ItemUpdateOne) ClearGeneratedProblems() *ItemUpdateOne {
	iuo.mutation.ClearGeneratedProblems()
	return iuo
}

// RemoveGeneratedProblemIDs removes the "generated_problems" edge to GeneratedProblem entities by IDs.
func (iuo *ItemUpdateOne) RemoveGeneratedProblemIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.RemoveGeneratedProblemIDs(ids...)
	return iuo
}

// RemoveGeneratedProblems removes "generated_problems" edges to GeneratedProblem entities.
func (iuo *ItemUpdateOne) RemoveGeneratedProblems(g ...*GeneratedProblem) *ItemUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return iuo.RemoveGeneratedProblemIDs(ids...)
}

// ClearProgress clears all "progress" edges to the ItemProgress entity.
func (iuo *ItemUpdateOne) ClearProgress() *ItemUpdateOne {
	iuo.mutation.ClearProgress()
	return iuo
}

// RemoveProgresIDs removes the "progress" edge to ItemProgress entities by IDs.
func (iuo *ItemUpdateOne) RemoveProgresIDs(ids ...int) *ItemUpdateOne {
	iuo.mutation.RemoveProgresIDs(ids...)
	return iuo
}

// RemoveProgress removes "progress" edges to ItemProgress entities.
func (iuo *ItemUpdateOne) RemoveProgress(i ...*ItemProgress) *ItemUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iuo.RemoveProgresIDs(ids...)
}

// Where appends a list predicates to the ItemUpdate builder.
func (iuo *ItemUpdateOne) Where(ps ...predicate.Item) *ItemUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ItemUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := item.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Item.name": %w`, err)}
		}
	}
	return nil
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(item.Table, item.Columns, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(item.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(item.FieldDescription, field.TypeString, value)
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.ClearField(item.FieldDescription, field.TypeString)
	}
	if iuo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.TopicTable,
			Columns: []string{item.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.TopicTable,
			Columns: []string{item.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.GeneratedProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.GeneratedProblemsTable,
			Columns: []string{item.GeneratedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedGeneratedProblemsIDs(); len(nodes) > 0 && !iuo.mutation.GeneratedProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.GeneratedProblemsTable,
			Columns: []string{item.GeneratedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.GeneratedProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.GeneratedProblemsTable,
			Columns: []string{item.GeneratedProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ProgressTable,
			Columns: []string{item.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedProgressIDs(); len(nodes) > 0 && !iuo.mutation.ProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ProgressTable,
			Columns: []string{item.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   item.ProgressTable,
			Columns: []string{item.ProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(itemprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
