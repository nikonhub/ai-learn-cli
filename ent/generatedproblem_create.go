// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nikonhub/ai-learn-cli/ent/generatedproblem"
	"github.com/nikonhub/ai-learn-cli/ent/item"
)

// GeneratedProblemCreate is the builder for creating a GeneratedProblem entity.
type GeneratedProblemCreate struct {
	config
	mutation *GeneratedProblemMutation
	hooks    []Hook
}

// SetProblemText sets the "problem_text" field.
func (gpc *GeneratedProblemCreate) SetProblemText(s string) *GeneratedProblemCreate {
	gpc.mutation.SetProblemText(s)
	return gpc
}

// SetGeneratedOn sets the "generated_on" field.
func (gpc *GeneratedProblemCreate) SetGeneratedOn(t time.Time) *GeneratedProblemCreate {
	gpc.mutation.SetGeneratedOn(t)
	return gpc
}

// SetNillableGeneratedOn sets the "generated_on" field if the given value is not nil.
func (gpc *GeneratedProblemCreate) SetNillableGeneratedOn(t *time.Time) *GeneratedProblemCreate {
	if t != nil {
		gpc.SetGeneratedOn(*t)
	}
	return gpc
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (gpc *GeneratedProblemCreate) SetItemID(id int) *GeneratedProblemCreate {
	gpc.mutation.SetItemID(id)
	return gpc
}

// SetNillableItemID sets the "item" edge to the Item entity by ID if the given value is not nil.
func (gpc *GeneratedProblemCreate) SetNillableItemID(id *int) *GeneratedProblemCreate {
	if id != nil {
		gpc = gpc.SetItemID(*id)
	}
	return gpc
}

// SetItem sets the "item" edge to the Item entity.
func (gpc *GeneratedProblemCreate) SetItem(i *Item) *GeneratedProblemCreate {
	return gpc.SetItemID(i.ID)
}

// Mutation returns the GeneratedProblemMutation object of the builder.
func (gpc *GeneratedProblemCreate) Mutation() *GeneratedProblemMutation {
	return gpc.mutation
}

// Save creates the GeneratedProblem in the database.
func (gpc *GeneratedProblemCreate) Save(ctx context.Context) (*GeneratedProblem, error) {
	gpc.defaults()
	return withHooks(ctx, gpc.sqlSave, gpc.mutation, gpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GeneratedProblemCreate) SaveX(ctx context.Context) *GeneratedProblem {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GeneratedProblemCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GeneratedProblemCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GeneratedProblemCreate) defaults() {
	if _, ok := gpc.mutation.GeneratedOn(); !ok {
		v := generatedproblem.DefaultGeneratedOn()
		gpc.mutation.SetGeneratedOn(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GeneratedProblemCreate) check() error {
	if _, ok := gpc.mutation.ProblemText(); !ok {
		return &ValidationError{Name: "problem_text", err: errors.New(`ent: missing required field "GeneratedProblem.problem_text"`)}
	}
	if v, ok := gpc.mutation.ProblemText(); ok {
		if err := generatedproblem.ProblemTextValidator(v); err != nil {
			return &ValidationError{Name: "problem_text", err: fmt.Errorf(`ent: validator failed for field "GeneratedProblem.problem_text": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.GeneratedOn(); !ok {
		return &ValidationError{Name: "generated_on", err: errors.New(`ent: missing required field "GeneratedProblem.generated_on"`)}
	}
	return nil
}

func (gpc *GeneratedProblemCreate) sqlSave(ctx context.Context) (*GeneratedProblem, error) {
	if err := gpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gpc.mutation.id = &_node.ID
	gpc.mutation.done = true
	return _node, nil
}

func (gpc *GeneratedProblemCreate) createSpec() (*GeneratedProblem, *sqlgraph.CreateSpec) {
	var (
		_node = &GeneratedProblem{config: gpc.config}
		_spec = sqlgraph.NewCreateSpec(generatedproblem.Table, sqlgraph.NewFieldSpec(generatedproblem.FieldID, field.TypeInt))
	)
	if value, ok := gpc.mutation.ProblemText(); ok {
		_spec.SetField(generatedproblem.FieldProblemText, field.TypeString, value)
		_node.ProblemText = value
	}
	if value, ok := gpc.mutation.GeneratedOn(); ok {
		_spec.SetField(generatedproblem.FieldGeneratedOn, field.TypeTime, value)
		_node.GeneratedOn = value
	}
	if nodes := gpc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedproblem.ItemTable,
			Columns: []string{generatedproblem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_generated_problems = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GeneratedProblemCreateBulk is the builder for creating many GeneratedProblem entities in bulk.
type GeneratedProblemCreateBulk struct {
	config
	err      error
	builders []*GeneratedProblemCreate
}

// Save creates the GeneratedProblem entities in the database.
func (gpcb *GeneratedProblemCreateBulk) Save(ctx context.Context) ([]*GeneratedProblem, error) {
	if gpcb.err != nil {
		return nil, gpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GeneratedProblem, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GeneratedProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GeneratedProblemCreateBulk) SaveX(ctx context.Context) []*GeneratedProblem {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GeneratedProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GeneratedProblemCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
