// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/nikonhub/ai-learn-cli/ent/generatedproblem"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/itemprogress"
	"github.com/nikonhub/ai-learn-cli/ent/schema"
	"github.com/nikonhub/ai-learn-cli/ent/settings"
	"github.com/nikonhub/ai-learn-cli/ent/topic"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	generatedproblemFields := schema.GeneratedProblem{}.Fields()
	_ = generatedproblemFields
	// generatedproblemDescProblemText is the schema descriptor for problem_text field.
	generatedproblemDescProblemText := generatedproblemFields[0].Descriptor()
	// generatedproblem.ProblemTextValidator is a validator for the "problem_text" field. It is called by the builders before save.
	generatedproblem.ProblemTextValidator = generatedproblemDescProblemText.Validators[0].(func(string) error)
	// generatedproblemDescGeneratedOn is the schema descriptor for generated_on field.
	generatedproblemDescGeneratedOn := generatedproblemFields[1].Descriptor()
	// generatedproblem.DefaultGeneratedOn holds the default value on creation for the generated_on field.
	generatedproblem.DefaultGeneratedOn = generatedproblemDescGeneratedOn.Default.(func() time.Time)
	itemFields := schema.Item{}.Fields()
	_ = itemFields
	// itemDescName is the schema descriptor for name field.
	itemDescName := itemFields[0].Descriptor()
	// item.NameValidator is a validator for the "name" field. It is called by the builders before save.
	item.NameValidator = itemDescName.Validators[0].(func(string) error)
	itemprogressFields := schema.ItemProgress{}.Fields()
	_ = itemprogressFields
	// itemprogressDescIntervalDays is the schema descriptor for interval_days field.
	itemprogressDescIntervalDays := itemprogressFields[1].Descriptor()
	// itemprogress.DefaultIntervalDays holds the default value on creation for the interval_days field.
	itemprogress.DefaultIntervalDays = itemprogressDescIntervalDays.Default.(int)
	// itemprogressDescEaseFactor is the schema descriptor for ease_factor field.
	itemprogressDescEaseFactor := itemprogressFields[2].Descriptor()
	// itemprogress.DefaultEaseFactor holds the default value on creation for the ease_factor field.
	itemprogress.DefaultEaseFactor = itemprogressDescEaseFactor.Default.(float64)
	// itemprogressDescStreak is the schema descriptor for streak field.
	itemprogressDescStreak := itemprogressFields[3].Descriptor()
	// itemprogress.DefaultStreak holds the default value on creation for the streak field.
	itemprogress.DefaultStreak = itemprogressDescStreak.Default.(int)
	settingsFields := schema.Settings{}.Fields()
	_ = settingsFields
	// settingsDescKey is the schema descriptor for key field.
	settingsDescKey := settingsFields[0].Descriptor()
	// settings.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	settings.KeyValidator = settingsDescKey.Validators[0].(func(string) error)
	topicFields := schema.Topic{}.Fields()
	_ = topicFields
	// topicDescName is the schema descriptor for name field.
	topicDescName := topicFields[0].Descriptor()
	// topic.NameValidator is a validator for the "name" field. It is called by the builders before save.
	topic.NameValidator = topicDescName.Validators[0].(func(string) error)
	// topicDescInstructions is the schema descriptor for instructions field.
	topicDescInstructions := topicFields[1].Descriptor()
	// topic.InstructionsValidator is a validator for the "instructions" field. It is called by the builders before save.
	topic.InstructionsValidator = topicDescInstructions.Validators[0].(func(string) error)
}
