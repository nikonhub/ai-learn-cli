// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nikonhub/ai-learn-cli/ent/item"
	"github.com/nikonhub/ai-learn-cli/ent/topic"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges        ItemEdges `json:"edges"`
	topic_items  *int
	selectValues sql.SelectValues
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// GeneratedProblems holds the value of the generated_problems edge.
	GeneratedProblems []*GeneratedProblem `json:"generated_problems,omitempty"`
	// Progress holds the value of the progress edge.
	Progress []*ItemProgress `json:"progress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// GeneratedProblemsOrErr returns the GeneratedProblems value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) GeneratedProblemsOrErr() ([]*GeneratedProblem, error) {
	if e.loadedTypes[1] {
		return e.GeneratedProblems, nil
	}
	return nil, &NotLoadedError{edge: "generated_problems"}
}

// ProgressOrErr returns the Progress value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ProgressOrErr() ([]*ItemProgress, error) {
	if e.loadedTypes[2] {
		return e.Progress, nil
	}
	return nil, &NotLoadedError{edge: "progress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldID:
			values[i] = new(sql.NullInt64)
		case item.FieldName, item.FieldDescription:
			values[i] = new(sql.NullString)
		case item.ForeignKeys[0]: // topic_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case item.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case item.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field topic_items", value)
			} else if value.Valid {
				i.topic_items = new(int)
				*i.topic_items = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Item.
// This includes values selected through modifiers, order, etc.
func (i *Item) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryTopic queries the "topic" edge of the Item entity.
func (i *Item) QueryTopic() *TopicQuery {
	return NewItemClient(i.config).QueryTopic(i)
}

// QueryGeneratedProblems queries the "generated_problems" edge of the Item entity.
func (i *Item) QueryGeneratedProblems() *GeneratedProblemQuery {
	return NewItemClient(i.config).QueryGeneratedProblems(i)
}

// QueryProgress queries the "progress" edge of the Item entity.
func (i *Item) QueryProgress() *ItemProgressQuery {
	return NewItemClient(i.config).QueryProgress(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return NewItemClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item
